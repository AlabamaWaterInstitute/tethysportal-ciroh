nfsserver: 'host.minikube.internal'
nfs:
  raster:
    pvcname: gs-cloud-raster-nfs-claim
    pvname: gs-cloud-raster-nfs
    path: /nfs/raster
    storage: 1Gi
  config:
    pvcname: gs-cloud-datadir-nfs-claim
    pvname: gs-cloud-datadir-nfs
    path: /nfs/datadir
    storage: 1Gi
  cache:
    pvcname: gs-cloud-gwc-cache-nfs-claim
    pvname: gs-cloud-gwc-cache-nfs
    path: /nfs/tiles
    storage: 1Gi
postgresql:
  image:
    debug: true
  auth:
    postgresPassword: 'password'
    username: 'postgres'
    database: 'postgres'
  fullnameOverride: 'psql-dep'
  primary:
    initdb:
      scripts:
        00_data_init.sql: |
          CREATE DATABASE ogscloud;
          CREATE ROLE username WITH LOGIN PASSWORD 'password';
          ALTER DATABASE ogscloud OWNER TO username ;
          \c ogscloud
          CREATE EXTENSION postgis;
          CREATE SCHEMA data;
          CREATE SCHEMA config;
rabbitmq:
  enabled: true
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 0.1
      memory: 512Mi

  image:
    registry: docker.io
    repository: bitnami/rabbitmq
    tag: 3.9.13-debian-10-r14

  auth:
    username: geoserver
    password: password
    erlangCookie: cookie

  persistence:
    enabled: false
additionalVolumes: &additional-volumes
  datadir:
    persistentVolumeClaim:
      claimName: gs-cloud-datadir-nfs-claim
  cache:
    persistentVolumeClaim:
      claimName: gs-cloud-gwc-cache-nfs-claim
  geodata:
    configMap:
      name: cm-jndi-geodata

additionalVolumeMounts: &additional-volume-mounts
  /opt/app/data_directory:
    name: 'datadir'
  /mnt/cache:
    name: 'cache'
  /custom/geodata:
    name: 'geodata'
    readOnly: true

env: &env-override
  RABBITMQ_HOST:
    value: 'ciroh-rabbitmq'
  RABBITMQ_USER:
    value: 'geoserver'
  RABBITMQ_PASSWORD:
    type: secret
    name: 'ciroh-rabbitmq'
    key: 'rabbitmq-password'
  SPRING_PROFILES_ACTIVE:
    value: standalone,datadir
  GEOWEBCACHE_CACHE_DIR:
    value: '/mnt/cache'
  JAVA_OPTS_DEFAULT:
    value: '-DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80'
  JAVA_OPTS:
    value: '$(JAVA_OPTS_DEFAULT) -Dspring.config.additional-location=optional:file:/custom/geodata/jndi.yml'
    order: 1

additional-stuff: &additional-stuff
  volumes:
    <<: *additional-volumes
  containers:
    spring:
      env:
        <<: *env-override
      volumeMounts:
        <<: *additional-volume-mounts

geoservercloud:
  global:
    profile: standalone,datadir
    image:
      pullPolicy: IfNotPresent
  geoserver:
    # podSecurityContext:
    #   runAsUser: 1001
    #   runAsGroup: 1001
    #   fsGroup: 1001
    ingress:
      annotations:
        my-annotation: 'coucou'
      enabled: true
      hostGroups:
        host1:
          tls:
            enabled: false
          hosts:
            - localhost
    services:
      gateway:
        service:
          annotations:
            my-custom-annotation: 'hello'
          labels:
            one-custom-label: 'my-label'
        ingress:
          enabled: true
        <<: *additional-stuff
      webui:
        <<: *additional-stuff
      rest:
        <<: *additional-stuff
      wms:
        replicaCount: 2
        <<: *additional-stuff
      wcs:
        <<: *additional-stuff
      wfs:
        replicaCount: 2
        <<: *additional-stuff
      gwc:
        replicaCount: 2
        <<: *additional-stuff
