apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ciroh.fullname" . }}
  labels:
{{ include "ciroh.labels" . | nindent 4 }}

spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "ciroh.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "ciroh.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.imagePullSecrets }}
        imagePullSecrets:
          {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            # db values defined with postgis chart
            - name: APP_DB_HOST
              value: {{ .Values.postgis.fullnameOverride | quote }}
            - name: TETHYS_DB_HOST
              value: {{ .Values.postgis.fullnameOverride | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.postgis.postgres_user | quote }}
            # Tethys settings defined outside the env
            - name: ALLOWED_HOSTS
              value: "\"[{{- range .Values.ingresses.external.hosts }}{{ .host }},{{- end }}]\""
            # redis values
            - name: CHANNEL_LAYERS_CONFIG 
              value: "\"{'hosts':[{'host':\ {{ .Values.redis.fullnameOverride }}-master,\ 'port':\ {{ .Values.redis.master.containerPorts.redis }}}]}\""
            # gs-cloud env variables
            {{- if index .Values "gs-cloud" "enabled" }}
            - name: TETHYS_GS_USERNAME
              value: {{ index .Values "gs-cloud" "geoservercloud" "geoserver" "adminCredentials" "userKey" | quote }}
            - name: TETHYS_GS_PASSWORD
              value: {{ index .Values "gs-cloud" "geoservercloud" "geoserver" "adminCredentials" "passKey" | quote }}
            - name: TETHYS_GS_PROTOCOL
              value: 'http'
            - name: TETHYS_GS_HOST
              value: {{ index .Values "gs-cloud" "geoservercloud" "geoserver" "services" "gateway" "service" "name" | quote }}
            - name: TETHYS_GS_PORT
              value: {{ index .Values "gs-cloud" "geoservercloud" "geoserver" "services" "gateway" "service" "ports" 0 "port" | quote }}            
            {{- end }}
            # thredds env variables
            {{- if .Values.thredds.enabled }}
            - name: THREDDS_TDS_USERNAME
              value: {{ .Values.thredds.username | quote }}
            - name: THREDDS_TDS_PASSWORD
              value: {{ .Values.thredds.password | quote }}
            - name: THREDDS_TDS_CATALOG
              value: {{ .Values.thredds.thredds_tds_catalog | quote }}
            - name: THREDDS_TDS_PRIVATE_PROTOCOL
              value: 'http'
            - name: THREDDS_TDS_PRIVATE_HOST
              value: {{ .Values.thredds.fullnameOverride | quote }}
            - name: THREDDS_TDS_PRIVATE_PORT
              value: {{ index .Values.thredds.service.ports 0 "port" | quote }}
            - name: THREDDS_TDS_PUBLIC_HOST
              value: {{ .Values.thredds.fullnameOverride | quote }}
            - name: THREDDS_TDS_PUBLIC_PORT
              value: "{{ if $.Values.ingresses.external.tls }}443{{else}}80{{ end }}"
            - name: THREDDS_TDS_PUBLIC_PROTOCOL
              value: "http{{ if $.Values.ingresses.external.tls }}s{{ end }}"
            {{- end }}
            # extra env v
            {{- range $key, $value :=  .Values.tethys.env }}
            - name: {{ quote $key }}
              value: {{ quote $value }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          {{- range .Values.tethys.volumeMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- with .subPath }}
              subPath: {{ . }}
              {{- end }}
          {{- end }}

      {{- $init_scripts := .Files.Glob "extra_config/**.sh" }}
      {{ if $init_scripts }}
      initContainers:
        {{- if .Values.tethys.init_containers.wait_for_db }}
        - name: wait-tethys-postgresdb
          image: postgis/postgis:latest
          env:
            - name: PGHOST
              value: {{ .Values.postgis.fullnameOverride | quote }}
            - name: PGUSER
              value: {{ .Values.tethys.env.TETHYS_DB_USERNAME.value | quote }}
            - name: PGPASSWORD
              value: {{ .Values.tethys.env.TETHYS_DB_SUPERUSER_PASS.value | quote }}
            - name: PGDATABASE
              value: {{ .Values.tethys.env.TETHYS_DB_NAME.value | quote }}
          args:
            - /bin/bash
            - -c
            - |
              while ! psql -c 'select 1' > /dev/null 2>&1; do
                echo "waiting for tethys-postgresdb database to be ready"
                sleep 1
              done
              echo "tethys-postgresdb database is ready!"
        {{- end }}
        {{- range $path, $_ :=  .Files.Glob  "extra_config/**.sh" }}    
        - name: {{ $path | trimPrefix "extra_config/" }}
          image: 3.11.7-slim-bookworm
          command: ["/bin/sh"]
          args: ["{{ $path | trimPrefix "extra_config/" }}" ]
          env: 
          {{- range $key, $value :=  $.Values.tethys.init_containers.env }}
            - name: {{ quote $key }}
              value: {{ quote $value }}
          {{- end }}
          volumeMounts:
          - name: init-config-volume
            mountPath: /usr/local/bin
            subPath: {{ $path | trimPrefix "extra_config/" }}
          imagePullPolicy: IfNotPresent    
        {{ end }}
      {{- end }}

      volumes:
        {{- range .Values.tethys.volumes }}
          - name: {{ .name }}
            {{- with .persistentVolumeClaim }}
            persistentVolumeClaim:
              claimName: {{ .claimName }}
            {{- end }}
            {{- with .configMap }}
            configMap:
              name: {{ .name }}
            {{- end }}
        {{- end }}
        {{- $init_scripts := .Files.Glob "extra_config/**.sh" }}
        {{ if $init_scripts }}        
          - name: init-config-volume
            configMap:
              name: "{{ include "ciroh.fullname" . }}-init-config"
        {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
