namespace:
  enabled: false
  name: cirohportal
  limits:
    cpu: '8'
    memory: 16Gi
    ephemeral_storage: '10Gi'
  requests:
    cpu: '8'
    memory: 16Gi
    ephemeral_storage: '20Gi'
image:
  repository: 'awiciroh/tethysapp-ciroh-portal'
  tag: dev_latest
  pullPolicy: 'IfNotPresent'
ingresses:
  enabled: true
  external:
    enabled: true
    className: 'alb'
    annotations:
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/backend-protocol: HTTP
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
      alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=4000

    hosts:
      - host: portal.ciroh.org
        paths:
          - path: '/t'
            pathType: Prefix
            backend:
              service:
                # @fullnameOverride
                name: cirohportal-prod
                port:
                  name: http
          - path: '/'
            pathType: Prefix
            backend:
              service:
                # @djangocms.fullnameOverride
                name: ciroh-cms
                port:
                  # @djangocms.service.externalPort
                  number: 80
          - path: '/geoserver-cloud'
            pathType: Prefix
            backend:
              service:
                # @gs-cloud.geoservercloud.geoserver.services.gateway.service.name
                name: cirohportal-prod-geoserver-gateway
                port:
                  # @gs-cloud.geoservercloud.geoserver.services.gateway.service.0.port
                  number: 8080
          - path: '/thredds'
            pathType: Prefix
            backend:
              service:
                # @thredds.fullnameOverride
                name: ciroh-tds
                port:
                  # @thredds.service.ports.0.port
                  number: 8080
    tls: []
  static:
    enabled: true
    className: 'alb'
    annotations:
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/backend-protocol: HTTP
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
    hosts:
      - host: portal.ciroh.org
        paths:
          - path: /t/static
            pathType: Prefix
            backend:
              service:
                name: cirohportal-prod
                port:
                  name: http
    tls: []

tethys:
  init_containers:
    wait_for_db: true
    env:
      TETHYS_HOME:
        value: '/usr/lib/tethys'
      TETHYS_DB_HOST:
        value: 'ciroh-db'
      TETHYS_DB_PORT:
        value: '5432'
      POSTGRES_PASSWORD:
        value: 'please_dont_use_default_passwords'
      POSTGRES_USER:
        value: 'postgres'
      TETHYS_GS_HOST:
        value: 'cirohportal-prod-geoserver-gateway'
      TETHYS_GS_PASSWORD:
        value: 'geoserver'
      TETHYS_GS_PORT:
        value: '8080'
      TETHYS_GS_USERNAME:
        value: 'admin'
      TETHYS_GS_PROTOCOL:
        value: 'http'
      GWDM_WORKSPACE_NAME:
        value: 'gwdm'
      GWDM_STORE_NAME:
        value: 'gwdm'
      GWDM_TABLE_NAME:
        value: 'gwdm_gwdb'
      GWDM_REGION_LAYER_NAME:
        value: 'region'
      GWDM_AQUIFER_LAYER_NAME:
        value: 'aquifer'
      GWDM_WELL_LAYER_NAME:
        value: 'well'
  volumeMounts:
    - name: tethys-persist-pv
      mountPath: '/var/lib/tethys_persist'
    - name: thredds-persistent-storage
      mountPath: '/var/lib/tethys_persist/thredds_data/tethys'
      subPath: 'tethys'
    - name: config-volume
      mountPath: '/usr/lib/tethys/portal_changes.yml'
      subPath: portal_changes.yml
    - name: config-volume
      mountPath: '/usr/lib/tethys/proxy_apps.yml'
      subPath: proxy_apps.yml
  volumes:
    - name: tethys-persist-pv
      persistentVolumeClaim:
        claimName: tethys-persist-pvc
    - name: thredds-persistent-storage
      persistentVolumeClaim:
        claimName: thredds-pv-claim
    - name: config-volume
      configMap:
        name: 'cirohportal-prod-configmap'
  env:
    TETHYS_DB_ENGINE:
      value: 'django.db.backends.postgresql'
    SKIP_DB_SETUP:
      value: true
    # gwdm settings
    GWDM_WORKSPACE_NAME:
      value: 'gwdm'
    GWDM_STORE_NAME:
      value: 'gwdm'
    GWDM_TABLE_NAME:
      value: 'gwdm_gwdb'
    GWDM_REGION_LAYER_NAME:
      value: 'region'
    GWDM_AQUIFER_LAYER_NAME:
      value: 'aquifer'
    GWDM_WELL_LAYER_NAME:
      value: 'well'
    # Tethys settings
    PREFIX_URL:
      value: 't'
    CLIENT_MAX_BODY_SIZE:
      value: 1G
    DATA_UPLOAD_MAX_MEMORY_SIZE:
      value: 1073741824
    FILE_UPLOAD_MAX_MEMORY_SIZE:
      value: 1073741824
    NGINX_READ_TIME_OUT:
      value: 1800
    SITE_TITLE:
      value: 'CIROH Portal'
    BRAND_TEXT:
      value: 'CIROH Portal'
    PRIMARY_COLOR:
      value: '#256291'
    SECONDARY_COLOR:
      value: '#7C99AC'
    BACKGROUND_COLOR:
      value: '#D7D3C7'
    HERO_TEXT:
      value: 'Welcome to the CIROH Portal'
    BLURB_TEXT:
      value: 'CIROH Tethys platform provides access to a suite of pre-built applications commonly used by the Cooperative Institute for Research to Operations in Hydrology (CIROH) research community. CIROH is a national consortium of science and services partnered with the National Oceanic and Atmospheric Administration’s (NOAA) National Water Center. It aims to advance water prediction – the forecasting of streamflow, extreme events such as floods and droughts, and water quality – and enhance the communitys ability to deal with water-related challenges. This platform works through Amazon Web Services'
    FEATURE_1_HEADING:
      value: 'Tethys Platform'
    FEATURE_1_BODY:
      value: 'Tethys was piloted by implementing web portals for partners of the CIROH and Brigham Young University (BYU). It includes a suite of free, open-source software and is powered by the Django Python web framework.'
    FEATURE_2_HEADING:
      value: Applications
    FEATURE_2_BODY:
      value: 'Tethys is a mega-platform that hosts applications for hydrological and meteorological forecasting, discovery, visualization and download of data related to hydrometeorological variables.'
    FEATURE_3_HEADING:
      value: 'Terms of Use'
    FEATURE_3_BODY:
      value: 'The use of the portal will be carried out under the sole and exclusive responsibility of the user.'
    COPYRIGHT:
      value: 'Copyright © 2024 CIROH'
    HYDROSHARE_CLIENT_ID:
      value: '811ONYIWyMlsDdo82vP5LjdHOm1PGnIEVnykbTO1'
    AUTHENTICATION_BACKENDS:
      value: '"[tethys_services.backends.hydroshare.HydroShareOAuth2]"'
    SOCIAL_AUTH_LOGIN_REDIRECT_URL:
      value: '/t/apps/'

  workspace_size: '16Gi'
  portal_changes:
    apps:
      ggst:
        services:
          custom_settings:
            conda_python_path: /opt/conda/envs/tethys/bin/python
            earthdata_pass: byuGRACE1
            earthdata_username: byugrace
            global_output_directory: /usr/lib/tethys
            grace_thredds_catalog: 'http://portal.ciroh.org/thredds/catalog/ciroh_data/tethys/ggst_thredds_directory/catalog.xml'
            grace_thredds_directory: /var/lib/tethys_persist/thredds_data/tethys/ggst_thredds_directory
      metdataexplorer:
        services:
          custom_settings:
            disclaimer_header: GIO TERMS OF SERVICE 4
            disclaimer_message: The MDE is a happy tethys application
          persistent:
            thredds_db: tethys_postgis
      swe:
        services:
          custom_settings: {}
          spatial:
            thredds_service: tethys_thredds

      water_data_explorer:
        services:
          custom_settings: {}
          persistent:
            catalog_db: tethys_postgis

      gwdm:
        services:
          custom_settings:
            gw_data_directory: /var/lib/tethys_persist/thredds_data/tethys/gwdm_data_directory
            gw_thredds_directory: /var/lib/tethys_persist/thredds_data/tethys/gwdm_thredds_directory
            gw_thredds_catalog: 'http://portal.ciroh.org/thredds/catalog/ciroh_data/tethys/gwdm_thredds_directory/catalog.xml'
          persistent:
            gwdb: tethys_postgis
          spatial:
            primary_geoserver: tethys_geoserver
            primary_thredds: tethys_thredds

  proxy_apps:
    owp_nwm_map_viewer:
      name: OWP NWM Map Viewer
      endpoint: https://water.noaa.gov/map
      logo_url: /t/static/ciroh_theme/images/owp.png
      description: Proxy app for Office in Water Prediction
      tags: NOAA
      enabled: true
      show_in_apps_library: true
      order: 0
      back_url: web
      open_in_new_tab: true
    ciroh_jupyterhub:
      name: CIROH JupyterHub
      endpoint: https://jupyterhub.cuahsi.org/hub/login
      logo_url: /t/static/ciroh_theme/images/jupyterhub.png
      description: Proxy app for the CIROH JupyterHub
      tags: CUAHSI
      enabled: true
      show_in_apps_library: true
      order: 1
      back_url: web
      open_in_new_tab: true
    hydroshare:
      name: HydroShare
      endpoint: https://www.hydroshare.org/home/
      logo_url: /t/static/ciroh_theme/images/HydroShare.png
      description: Proxy app for the Hydroshare app
      tags: CUAHSI
      enabled: true
      show_in_apps_library: true
      order: 2
      back_url: web
      open_in_new_tab: true

djangocms:
  image:
    repository: gioelkin/django-cms
    tag: latest
    pullPolicy: 'Always'
  enabled: true
  ingress:
    enabled: false
  fullnameOverride: 'ciroh-cms'
  storageClass:
    storageClassName: 'efs-pv'
  env:
    - name: SECRET_KEY
      value: 'ztw%%f050)x2=t+2y+td#xfl$%i35g=s0!^%w7@pqo8z6w7(mz'
    - name: DJANGOCMS_DB_NAME
      value: 'djangocms'
    - name: DJANGOCMS_DB_USER
      value: 'djangocmsadmin'
    - name: DJANGOCMS_DB_PWD
      value: 'pass'
    - name: DJANGOCMS_DB_HOST
      value: 'ciroh-db'
    - name: DJANGOCMS_DB_PORT
      value: '5432'
    - name: DJANGO_SUPERUSER_USERNAME
      value: 'admin'
    - name: DJANGO_SUPERUSER_EMAIL
      value: 'example@gmail.com'
    - name: DJANGO_SUPERUSER_PASSWORD
      value: 'pass'
    - name: DJANGOCMS_ADMIN_DB_USER
      value: 'postgres'
    - name: DJANGOCMS_ADMIN_DB_PWD
      value: 'please_dont_use_default_passwords'
    - name: DEBUG
      value: 'True'
    - name: SECURE_SSL_REDIRECT
      value: 'False'
    - name: DOMAIN
      value: 'portal.ciroh.org'
    - name: STATIC_URL
      value: '/static_cms/'
    # - name: SKIP_CREATION_USER
    #   value: 'done'
  service:
    type: ClusterIP
    externalPort: 80
    internalPort: 80
  storage_size: 3Gi
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 2
      memory: 1Gi
  persistentVolumeClaim:
    name: 'djangocms-pv-claim'
thredds:
  fullnameOverride: 'ciroh-tds'
  thredds_tds_catalog: '/thredds/catalog/ciroh_data/tethys/swe/catalog.xml'
  storageClass:
    storageClassName: 'efs-pv'

  image:
    repository: unidata/thredds-docker
    tag: 5.4
    pullPolicy: 'Always'
  persistentVolumeClaim:
    name: 'thredds-pv-claim'
  # Data to be used for the public folder and also for the wms palettes
  data:
    init_default_config: true
    # an example of a data archive is the following https://example.com/some/web/thredds_data.tgz
    public:
      init_data: true
      data_archive: 'https://init-service-data.s3.amazonaws.com/tds_data.tar.gz'
      # should match the last folder in grace_thredds_directory_relative_path: 'fake_data'
      subpath: 'tethys'
    wms_palettes:
      # an example of a wmsPalettes archive is the following https://example.com/some/web/wmsPalettes.tgz
      init_data: true
      data_archive: 'https://init-service-data.s3.amazonaws.com/wmsPalettes.tar.gz'
      subpath: 'wmsPalettes'

  # Configuration files: catalog.xml, threddsCatalog.xml, wmsConfig.xml, tomcat-users.xml
  config_files:
    init_default_config: true
    catalog:
      init_file: true
      file_content: |
        <?xml version="1.0" encoding="UTF-8"?>
        <catalog name="CIROH THREDDS Server Catalog"
                xmlns="http://www.unidata.ucar.edu/namespaces/thredds/InvCatalog/v1.0"
                xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://www.unidata.ucar.edu/namespaces/thredds/InvCatalog/v1.0
                  http://www.unidata.ucar.edu/schemas/thredds/InvCatalog.1.0.6.xsd">

          <service name="all" base="" serviceType="compound">
            <service name="odap" serviceType="OpenDAP" base="/thredds/dodsC/"/>
            <service name="dap4" serviceType="DAP4" base="/thredds/dap4/"/>
            <service name="http" serviceType="HTTPServer" base="/thredds/fileServer/"/>
            <service name="wcs" serviceType="WCS" base="/thredds/wcs/"/>
            <service name="wms" serviceType="WMS" base="/thredds/wms/"/>
            <service name="ncssGrid" serviceType="NetcdfSubset" base="/thredds/ncss/grid/"/>
            <service name="ncssPoint" serviceType="NetcdfSubset" base="/thredds/ncss/point/"/>
            <service name="cdmremote" serviceType="CdmRemote" base="/thredds/cdmremote/"/>
            <service name="iso" serviceType="ISO" base="/thredds/iso/"/>
            <service name="ncml" serviceType="NCML" base="/thredds/ncml/"/>
            <service name="uddc" serviceType="UDDC" base="/thredds/uddc/"/>
          </service>

          <service name="dap" base="" serviceType="compound">
            <service name="odap" serviceType="OpenDAP" base="/thredds/dodsC/" />
            <service name="dap4" serviceType="DAP4" base="/thredds/dap4/" />
          </service>

          <datasetRoot path="data_home" location="content/" />

          <datasetScan name="CIROH Thredds Data Files" ID="cirohDatasetScan"
                      path="ciroh_data" location="content/">
            <metadata inherited="true">
              <serviceName>all</serviceName>
              <dataType>Grid</dataType>
            </metadata>

            <filter>
              <include wildcard="*.nc"/>
              <include wildcard="*.nc4"/>
              <include wildcard="*"/>
            </filter>
          </datasetScan>
        </catalog>
    thredds_config:
      init_file: true
      file_content: |
        <?xml version="1.0" encoding="UTF-8"?>
        <threddsConfig>

          <!-- all options are commented out in standard install - meaning use default values -->
          <!-- see https://www.unidata.ucar.edu/software/thredds/current/tds/reference/ThreddsConfigXMLFile.html -->
          <serverInformation>
            <name>CIROH TDS Installation</name>
            <logoUrl>/thredds/threddsIcon.gif</logoUrl>
            <!-- <logoUrl>/thredds/threddsIcon.png</logoUrl> -->
            <logoAltText>CIROH TDS Installation</logoAltText>

            <abstract>Scientific Data</abstract>
            <keywords>meteorology, atmosphere, climate, ocean, earth science</keywords>
            
            <contact>
              <name>CIROH</name>
              <organization>CIROH</organization>
              <email>gromero@aquaveo.com</email>
              <!--phone></phone-->
            </contact>
            <hostInstitution>
              <name>CIROH</name>
              <webSite>https://ciroh.ua.edu/</webSite>
              <logoUrl>/thredds/myGroup.gif</logoUrl>
              <!-- <logoUrl>/thredds/myGroup.png</logoUrl> -->
              <logoAltText>CIROH</logoAltText>
            </hostInstitution>
          </serverInformation>

          <!--
          The <catalogRoot> element:
          For catalogs you don't want visible from the /thredds/catalog.xml chain
          of catalogs, you can use catalogRoot elements. Each catalog root config
          catalog is crawled and used in configuring the TDS.

          <catalogRoot>myExtraCatalog.xml</catalogRoot>
          <catalogRoot>myOtherExtraCatalog.xml</catalogRoot>
          -->

          <!--
          * Setup for generated HTML pages.
            -->
          <htmlSetup>
            <!--
            * CSS documents used in generated HTML pages.
            * The CSS document given in the "catalogCssUrl" element is used for HTML catalog views,
            * "datasetCssUrl" is used for the dataset access HTML view,
            * and the CSS document given in the "standardCssUrl"element is used in all other generated HTML pages.
            * The OPeNDAP HTML form is treated special - the only CSS document applied to this page is
            * defined by the `openDapCssUrl` element.
            *
            * NOTE: CSS documents should be placed inside tds.content.root.path/thredds/public
            *

            <standardCssUrl>standard.css</standardCssUrl>
            <catalogCssUrl>catalog.css</catalogCssUrl>
            <datasetCssUrl>dataset.css</datasetCssUrl>
            <openDapCssUrl>tdsDap.css</openDapCssUrl>
            * -->

            <!--
            * The Google Analytics Tracking ID you would like to use for the
            * webpages associated with THREDDS. This will not track WMS or DAP
            * requests for data, only browsing the catalog.

            <googleTrackingCode></googleTrackingCode>
            -->

            <!--
            * Allow the TDS to generate JSON-LD in Dataset HTML pages following
            * schema.org Dataset (https://schema.org/Dataset)
            * The default is false, as this is experimental

            <generateDatasetJsonLD>false</generateDatasetJsonLD>
            -->

          </htmlSetup>
          
          <!--
          The <CORS> element controls Cross-Origin Resource Sharing (CORS).
          CORS is a way to allow a website (such as THREDDS) to open up access
          to resources to web pages and applications running on a different domain.
          One example would be allowing a web-application to use fonts from
          a separate host. For TDS, this can allow a javascript app running on a
          different site to access data on a THREDDS server.
          For more information see: https://en.wikipedia.org/wiki/Cross-origin_resource_sharing
          The elements below represent defaults. Only the <enabled> tag is required
          to enable CORS. The default allowed origin is '*', which allows sharing
          to any domain.
          -->

          <CORS>
            <enabled>true</enabled>
            <maxAge>1728000</maxAge>
            <allowedMethods>GET</allowedMethods>
            <allowedHeaders>Authorization</allowedHeaders>
            <allowedOrigin>*</allowedOrigin>
          </CORS>


          <!-- 
            The <TdsUpdateConfig> element controls if and how the TDS checks
            for updates. The default is for the TDS to check for the current
            stable and development release versions, and to log that information
            in the TDS serverStartup.log file as INFO entries.

          <TdsUpdateConfig>
            <logVersionInfo>true</logVersionInfo>
          </TdsUpdateConfig>
          -->

          <!--
          The <CatalogServices> element:
          - Services on local TDS served catalogs are always on.
          - Services on remote catalogs are set with the allowRemote element
          below. They are off by default (recommended).
          -->
          <CatalogServices>
            <allowRemote>false</allowRemote>
          </CatalogServices>

          <!--
          Configuring the CDM (netcdf-java library)
          see https://www.unidata.ucar.edu/software/netcdf-java/reference/RuntimeLoading.html

          <nj22Config>
            <ioServiceProvider class="edu.univ.ny.stuff.FooFiles"/>
            <coordSysBuilder convention="foo" class="test.Foo"/>
            <coordTransBuilder name="atmos_ln_sigma_coordinates" type="vertical" class="my.stuff.atmosSigmaLog"/>
            <typedDatasetFactory datatype="Point" class="gov.noaa.obscure.file.Flabulate"/>
          </nj22Config>
          -->

          <!--
          CDM uses the DiskCache directory to store temporary files, like uncompressed files.
          <DiskCache>
            <alwaysUse>false</alwaysUse>
            <scour>1 hour</scour>
            <maxSize>1 Gb</maxSize>
          </DiskCache>
          -->

          <!--
          Caching open NetcdfFile objects.
          default is to allow 50 - 100 open files, cleanup every 11 minutes
          <NetcdfFileCache>
            <minFiles>50</minFiles>
            <maxFiles>100</maxFiles>
            <scour>11 min</scour>
          </NetcdfFileCache>
          -->

          <!--
          The <HTTPFileCache> element:
          allow 10 - 20 open datasets, cleanup every 17 minutes
          used by HTTP Range requests.
          <HTTPFileCache>
            <minFiles>10</minFiles>
            <maxFiles>20</maxFiles>
            <scour>17 min</scour>
          </HTTPFileCache>
          -->

          <!--
          Writing GRIB indexes.
          <GribIndex>
            <alwaysUse>false</alwaysUse>
            <neverUse>false</neverUse>
            <dir>/tomcat_home/content/thredds/cache/grib/</dir>
            <policy>nestedDirectory</policy>
            <scour>0 hours</scour>
            <maxAge>90 days</maxAge>
          </GribIndex>
          -->

          <!--
          Persist joinNew aggregations to named directory. scour every 24 hours, delete stuff older than 90 days
          <AggregationCache>
            <scour>24 hours</scour>
            <maxAge>90 days</maxAge>
            <cachePathPolicy>NestedDirectory</cachePathPolicy>
          </AggregationCache>
          -->

          <!--
          How to choose the template dataset for an aggregation. latest, random, or penultimate
          <Aggregation>
            <typicalDataset>penultimate</typicalDataset>
          </Aggregation>
          -->
          
          <NetcdfSubsetService>
            <allow>true</allow>
            <scour>10 min</scour>
            <maxAge>-1 min</maxAge>
          </NetcdfSubsetService>

          <!--
          <JupyterNotebookService>
            <allow>true</allow>
            <maxAge>60</scour>
            <maxFiles>100</maxFiles>
          </JupyterNotebookService>
          -->

          
          <Opendap>
            <ascLimit>50</ascLimit>
            <binLimit>500</binLimit>
            <serverVersion>opendap/3.7</serverVersion>
          </Opendap>
          
          <!--
          The WCS Service is on by default.
          Also, off by default (and encouraged) is operating on a remote dataset.
          -->

          <WCS>
            <allow>true</allow>
            <allowRemote>false</allowRemote>
            <scour>15 min</scour>
            <maxAge>30 min</maxAge>
          </WCS>

          
          <WMS>
            <allow>true</allow>
            <allowRemote>true</allowRemote>
            <maxImageWidth>2048</maxImageWidth>
            <maxImageHeight>2048</maxImageHeight>
          </WMS>
          

          
          <NCISO>
            <ncmlAllow>true</ncmlAllow>
            <uddcAllow>true</uddcAllow>
            <isoAllow>true</isoAllow>
          </NCISO>


          <!--
          <NCSOS>
            <allow>false</allow>
          </NCSOS>
          -->

          <!-- CatalogGen service is off by default.
          <CatalogGen>
            <allow>false</allow>
          </CatalogGen>
          -->

          <!-- DLwriter service is off by default.
              As is support for operating on remote catalogs.
          <DLwriter>
            <allow>false</allow>
            <allowRemote>false</allowRemote>
          </DLwriter>
          -->

          <!-- DqcService is off by default.
          <DqcService>
            <allow>false</allow>
          </DqcService>
          -->

          <!--
          Link to a Viewer application on the HTML page:
          <Viewer>my.package.MyViewer</Viewer>
          -->

          <!--
          Add a DataSource - essentially an IOSP with access to Servlet request parameters
          <datasetSource>my.package.DatsetSourceImpl</datasetSource>
          -->

          <!--
            Configure how the NetCDF-4 C library is discovered and used.
            libraryPath: The directory in which the native library is installed.
            libraryName: The name of the native library. This will be used to locate the proper .DLL, .SO, or .DYLIB file
              within the libraryPath directory.
            useForReading: By default, the native library is only used for writing NetCDF-4 files; a pure-Java layer is
              responsible for reading them. However, if this property is set to true, then it will be used for reading
              NetCDF-4 (and HDF5) files as well.
          -->
          <!--
          <Netcdf4Clibrary>
            <libraryPath>/usr/local/lib</libraryPath>
            <libraryName>netcdf</libraryName>
            <useForReading>false</useForReading>
          </Netcdf4Clibrary>
          -->
        </threddsConfig>

    wms_config:
      init_file: false
      file_content: ''
    tomcat_users:
      init_file: true
      file_content: |
        <?xml version='1.0' encoding='utf-8'?>
        <tomcat-users xmlns="http://tomcat.apache.org/xml"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xsd"
                      version="1.0">

          <role rolename="tdsConfig" description="can change THREDDS configuration files"/>
          <role rolename="tdsMonitor" description="can monitor log files with tdsMonitor program"/>
          <role rolename="tdsTrigger" description="can trigger feature collections, eg from tdm"/>

          <user username="tdm"
                password="tdm_pass"
                roles="tdsTrigger"/>
          <user username="admin"
                password="tdm_pass"
                roles="tdsConfig,tdsMonitor"/>
        </tomcat-users>
  storage_size: '10Gi'
  resources:
    requests:
      memory: '4Gi'
      cpu: '1'
    limits:
      memory: '5Gi'

gs-cloud:
  enabled: true
  envVariables:
    SERVICE_GATEWAY_NAME:
      value: cirohportal-prod-geoserver
  persistent:
    raster:
      pvname: gs-cloud-raster-nfs
      pvcname: gs-cloud-raster-nfs-claim
      pvcreation: false
      storageClass:
        enabled: false
        storageClassName: 'efs-pv'
    config:
      pvname: gs-cloud-datadir-nfs
      pvcname: gs-cloud-datadir-nfs-claim
      pvcreation: false
      storageClass:
        enabled: false
        storageClassName: 'efs-pv'

    cache:
      pvname: gs-cloud-gwc-cache-nfs
      pvcname: gs-cloud-gwc-cache-nfs-claim
      pvcreation: false
      storageClass:
        enabled: false
        storageClassName: 'efs-pv'

  pdb: &common-pdb
    enabled: false

  # tweak the resources here
  resources: &common-resources
    requests:
      memory: 512Mi
      cpu: 0.1
    limits:
      memory: 4Gi
      cpu: 4.0

  # this should make sure that the containers are started after the database is started
  containers_additional_conf: &containers-additional-conf
    resources:
      <<: *common-resources
    livenessProbe:
      initialDelaySeconds: 200
      periodSeconds: 10
    readinessProbe:
      periodSeconds: 5
      initialDelaySeconds: 200

  # in order to override env values
  env: &env-override
    RABBITMQ_HOST:
      value: 'cirohportal-prod-rabbitmq'
    RABBITMQ_USER:
      value: 'geoserver'
    RABBITMQ_PASSWORD:
      type: secret
      name: 'cirohportal-prod-rabbitmq'
      key: 'rabbitmq-password'

  service: &common-service-definition
    type: ClusterIP
    servicePort: 8080
    ports:
      - name: gs-service
        port: 8080
        protocol: TCP
        targetPort: 8080
  geoservercloud:
    geoserver:
      ingress:
        enabled: false
        # tls: []
      services:
        gateway:
          pdb:
            enabled: false
            # <<: *common-pdb
          service:
            name: 'cirohportal-prod-geoserver-gateway'
            <<: *common-service-definition
          ingress:
            enabled: false
          containers:
            spring:
              env:
                <<: *env-override
              <<: *containers-additional-conf
        webui:
          pdb:
            <<: *common-pdb
          service:
            <<: *common-service-definition
          containers:
            spring:
              env:
                <<: *env-override
              <<: *containers-additional-conf
        rest:
          pdb:
            <<: *common-pdb
          service:
            <<: *common-service-definition
          containers:
            spring:
              env:
                <<: *env-override
              <<: *containers-additional-conf
        wms:
          pdb:
            <<: *common-pdb
          service:
            <<: *common-service-definition
          containers:
            spring:
              env:
                <<: *env-override
              <<: *containers-additional-conf
        wcs:
          pdb:
            <<: *common-pdb
          service:
            <<: *common-service-definition
          containers:
            spring:
              env:
                <<: *env-override
              <<: *containers-additional-conf
        wfs:
          pdb:
            <<: *common-pdb
          service:
            <<: *common-service-definition
          containers:
            spring:
              env:
                <<: *env-override
              <<: *containers-additional-conf
        gwc:
          pdb:
            <<: *common-pdb
          service:
            <<: *common-service-definition
          containers:
            spring:
              env:
                <<: *env-override
              <<: *containers-additional-conf

  postgresql:
    global:
      storageClass: 'efs-pv'
    volumePermissions:
      enabled: true
    primary:
      persistence:
        storageClass: 'efs-pv'
      livenessProbe:
        initialDelaySeconds: 600
      readinessProbe:
        initialDelaySeconds: 600

redis:
  enabled: true
  global:
    storageClass: 'efs-pv'
postgis:
  image:
    pullPolicy: 'IfNotPresent'
  storageClass:
    storageClassName: 'efs-pv'
  PersistentVolumeClaim:
    name: django-postgis-pv-claim

nodeSelector: {}
tolerations: []
affinity: {}

storageClass:
  provisioner: 'efs.csi.aws.com'
  enabled: true
  storageClassName: 'efs-pv'
  annotations:
    storageclass.kubernetes.io/is-default-class: 'true'
  reclaimPolicy: Delete
  volumeBindingMode: Immediate
  allowVolumeExpansion: true
  parameters:
    provisioningMode: efs-ap
    directoryPerms: '777'
    gid: '0'
    uid: '0'
