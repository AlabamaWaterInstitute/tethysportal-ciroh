name: test_deployment

on:
  push:
    branches:
      - '*'
env:
  DOCKER_HUB_ORG: gioelkin
  # DOCKER_HUB_ORG: ciroh
  DOCKER_REPO: tethysapp-ciroh-portal

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy-fake:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    env:
      AWS_REGION: us-east-1
      CLUSTER_NAME: ciroh-portal-prod

    steps:
      - uses: actions/checkout@v3

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --kubeconfig ./kubeconfig
          echo 'KUBE_CONFIG_DATA<<EOF' >> $GITHUB_ENV
          echo $(cat ./kubeconfig | base64) >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Set Tag
        run: |
          echo "TAG=dev_${GITHUB_SHA}" >> $GITHUB_ENV
          echo "TAG_LATEST=dev_latest" >> $GITHUB_ENV

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: export secring
        run: |
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          gpgconf --reload gpg-agent
          gpg --export-secret-keys > ~/.gnupg/secring.gpg

      #   - name: Prepare GPG key #this step is for using exported keys and make your github runner
      #     run: |
      #       gpg_dir=.cr-gpg
      #       mkdir "$gpg_dir"
      #       keyring="$gpg_dir/secring.gpg" #referring keyring to private key of gpg
      #       base64 -d <<< "$GPG_KEYRING_BASE64" > "$keyring" #storing base64 GPG key into keyring
      #       passphrase_file="$gpg_dir/passphrase"
      #       echo "$GPG_PASSPHRASE" > "$passphrase_file" #storing passphrase data into a file
      #       echo "CR_PASSPHRASE_FILE=$passphrase_file" >> "$GITHUB_ENV" #saving passphrase into github-environment
      #       echo "CR_KEYRING=$keyring" >> "$GITHUB_ENV" #saving private key into github-environemnt
      #     env:
      #       GPG_KEYRING_BASE64: '${{ secrets.GPG_KEYRING_BASE64 }}' #Referring secrets of github above
      #       GPG_PASSPHRASE: '${{ secrets.PASSPHRASE }}'

      - name: helm deploy
        uses: koslib/helm-eks-action@master
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        with:
          plugins: 'https://github.com/jkroepke/helm-secrets'
          command: helm repo add tethysportal-ciroh https://docs.ciroh.org/tethysportal-ciroh &&  echo $GPG_PASSPHRASE | helm secrets upgrade cirohportal-prod tethysportal-ciroh/ciroh --install --dry-run --timeout=3600s -f charts/ciroh/ci/prod_aws_values.yaml -f charts/ciroh/ci/secrets.yaml --set storageClass.parameters.fileSystemId=${{ secrets.FILE_SYSTEM_ID }} --set image.tag=${{ env.TAG }} --namespace cirohportal
