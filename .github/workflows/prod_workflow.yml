name: push_on_tag_prod_workflow

# Push to docker hub if tag has been created.
on:
  push:
    tags:
      - '*'
    paths:
      - 'charts/**'
      - 'salt/**'
      - 'config/**'
      - '**.Dokerfile'
      - 'snow-inspector/**'
      - 'tethysapp-hydrocompute/**'
      - 'tethysapp-metdataexplorer/**'
      - 'tethysapp-swe/**'
      - 'tethysapp-tethys_app_store/**'
      - 'tethysext-ciroh_theme/**'
      - 'Water-Data-Explorer/**'
env:
  DOCKER_HUB_ORG: gioelkin
  # DOCKER_HUB_ORG: ciroh
  DOCKER_REPO: tethysapp-ciroh-portal
  # DOCKER_REPO: tethysapp-ciroh

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # build image
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      # Checks-out the hydrocompute extra submodule
      - name: checkout Hydrocompute submodule
        run: |
          cd tethysapp-hydrocompute/tethysapp/hydrocompute/public/HydroCompute && git submodule update --init --recursive

      - name: Set Tag
        run: |
          echo "TAG=${GITHUB_REF:10}" >> $GITHUB_ENV
          echo "TAG_LATEST=latest" >> $GITHUB_ENV
      - name: Test Tag
        run: |
          echo $TAG

      - name: check_docker_file_changed_files
        id: changed-files-yaml
        uses: tj-actions/changed-files@v37
        with:
          files_yaml: |
            docker:
              - salt/**
              - prod.Dockerfile
              - piprequirements.txt
              - config/**
              - .gitmodules
              - snow-inspector/**
              - tethysapp-hydrocompute/**
              - tethysapp-metdataexplorer/**
              - tethysapp-swe/**
              - tethysapp-tethys_app_store/**
              - tethysext-ciroh_theme/**
              - Water-Data-Explorer/**

      - name: Set up Docker Buildx
        if: steps.changed-files-yaml.outputs.docker_any_changed == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        if: steps.changed-files-yaml.outputs.docker_any_changed == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_BUILDER_USERNAME }}
          password: ${{ secrets.DOCKER_BUILDER_TOKEN }}

      - name: build and push stable tag
        if: steps.changed-files-yaml.outputs.docker_any_changed == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./prod.Dockerfile
          push: true
          tags: ${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}:${{ env.TAG }}
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}-cache:latest
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}-cache:latest,mode=max

      - name: build and push latest tag
        if: steps.changed-files-yaml.outputs.docker_any_changed == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./prod.Dockerfile
          push: true
          tags: ${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}:${{ env.TAG_LATEST }}
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}-cache:latest
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}-cache:latest,mode=max

  # lint and test chart
  lint-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !cancelled()
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: check_chart_file_changed_files
        id: changed-chart-files-yaml
        uses: tj-actions/changed-files@v37
        with:
          files_yaml: |
            charts:
              - charts/**

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.6.3
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.3.1

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          ## If executed with debug this won't work anymore.
          changed=$(ct --config .github/config/ct.yaml list-changed)
          charts=$(echo "$changed" | tr '\n' ' ' | xargs)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
            echo "::set-output name=changed_charts::$charts"
          fi

      - name: Run Artifact Hub lint
        run: |
          curl -s https://api.github.com/repos/artifacthub/hub/releases/latest | grep -E 'browser_download_url' | grep linux_amd64.tar.gz\" | grep -Eo 'https://[^\"]*' | xargs wget -O - | tar -xz
          ./ah lint -p charts/ciroh || exit 1
          rm -f ./ah

      - name: Run chart-testing (lint)
        run: ct lint --debug --config .github/config/ct.yaml

      ## Might need to be uncommented when the testing gets resolved:
      ## the testing fails for two reasons the TDS services does never gets scheduled
      ## the automatization of the geoserver does not work and the salt job is failling
      # - name: Create kind cluster
      #   uses: helm/kind-action@v1.5.0
      #   if: steps.list-changed.outputs.changed == 'true'

      # - name: Run chart-testing (install)
      #   run: ct install --debug --config .github/config/ct.yaml
      #   if: steps.list-changed.outputs.changed == 'true'

  # release chart
  release:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Publish Helm charts
        uses: stefanprodan/helm-gh-pages@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          charts_dir: charts

  #deploy chart
  deploy:
    runs-on: ubuntu-latest
    needs: release
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    env:
      AWS_REGION: us-east-1
      CLUSTER_NAME: ciroh-portal-prod
    steps:
      - uses: actions/checkout@v3

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --kubeconfig ./kubeconfig
          echo 'KUBE_CONFIG_DATA<<EOF' >> $GITHUB_ENV
          echo $(cat ./kubeconfig | base64) >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: helm deploy
        uses: koslib/helm-eks-action@master
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
        with:
          command: helm repo add tethysportal-ciroh https://alabamawaterinstitute.github.io/tethysportal-ciroh && helm upgrade cirohportal-prod tethysportal-ciroh/ciroh --install --wait -f charts/ciroh/ci/prod_aws_values.yaml  --set image.tag=${{ env.TAG_LATEST }} --namespace cirohportal
