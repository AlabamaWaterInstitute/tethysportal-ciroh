name: Lint-Test-Release-Deploy Charts

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - 'charts/**'
      - 'salt/**'
      - 'config/**'
      - '**.Dokerfile'

jobs:
  conditional_job_check_docker_files:
    runs-on: 'ubuntu-latest'
    # Declare outputs for next jobs
    outputs:
      docker_files_changed: ${{ steps.check_docker_file_changed.outputs.docker_files_changed }}
    steps:
      - uses: actions/checkout@v2
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 2
      - shell: pwsh
        id: check_docker_file_changed
        run: |
          # Diff HEAD with the previous commit
          $diff = git diff --name-only HEAD^ HEAD

          # Check if a file under docs/ or with the .md extension has changed (added, modified, deleted)
          $SourceDiff = $diff | Where-Object { $_ -match '^salt/' -and $_ -match '^config/' -and  $_ -match '.Dockerfile$' }
          $HasDiff = $SourceDiff.Length -gt 0

          # Set the output named "docker_files_changed"
          Write-Host "::set-output name=docker_files_changed::$HasDiff"

  conditional_chart_check_files:
    runs-on: 'ubuntu-latest'
    # Declare outputs for next jobs
    outputs:
      chart_files_changed: ${{ steps.check_file_changed.outputs.chart_files_changed }}
    steps:
      - uses: actions/checkout@v2
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 2
      - shell: pwsh
        id: check_file_changed
        run: |
          # Diff HEAD with the previous commit
          $diff = git diff --name-only HEAD^ HEAD

          # Check if a file under docs/ or with the .md extension has changed (added, modified, deleted)
          $SourceDiff = $diff | Where-Object { $_ -match '^charts/ciroh' }
          $HasDiff = $SourceDiff.Length -gt 0

          # Set the output named "docker_files_changed"
          Write-Host "::set-output name=docker_files_changed::$HasDiff"

  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [conditional_job_check_docker_files]
    if: needs.conditional_job_check_docker_files.outputs.docker_files_changed == 'True'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      # Checks-out the hydrocompute extra submodule
      - name: checkout Hydrocompute submodule
        run: |
          cd tethysapp-hydrocompute/tethysapp/hydrocompute/public/HydroCompute && git submodule update --init --recursive

      - name: Set Tag
        run: |
          echo "TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
        # If the branch is stable, we'll overwrite the TAG to include stable.
      - name: Set Stable Tag
        if: endsWith(github.ref, '/stable')
        run: |
          echo "TAG=stable" >> $GITHUB_ENV
      - name: Test Tag
        run: |
          echo $TAG
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_BUILDER_USERNAME }}
          password: ${{ secrets.DOCKER_BUILDER_TOKEN }}
      - name: build and push tag
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./prod.Dockerfile
          push: true
          tags: ${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}:${{ env.TAG }}
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}-cache:latest
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}-cache:latest,mode=max

  startup_test:
    needs: [build]
    runs-on: ubuntu-latest
    services:
      db:
        image: postgis/postgis
        env:
          POSTGRES_HOST: db
          POSTGRES_PASSWORD: passpass
          POSTGRES_DB: tethys_postgis
          POSTGRES_PORT: 5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_BUILDER_USERNAME }} -p ${{ secrets.DOCKER_BUILDER_TOKEN }}

      - name: Pull Docker Image
        run: |
          docker pull ${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
      - name: Run Salt Test
        run: |
          docker run --rm --name ciroh_portal --network ${{ job.services.db.network }} --env-file env/web.env ${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }} /bin/bash -c "cd /usr/lib/tethys && source ./run.sh --test"
  cleanup:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: only keeps the first 5 image
        run: |
          echo "TAG=dev_${GITHUB_SHA}" >> $GITHUB_ENV
          echo $TAG
          . .github/scripts/clean_up_docker_hub.sh '${{ secrets.DOCKER_BUILDER_USERNAME }}' '${{ secrets.DOCKER_BUILDER_TOKEN }}' '${{ env.DOCKER_HUB_ORG }}' '${{ env.DOCKER_REPO }}' '${{ env.MAX_NUMBER_IMAGE }}'

  lint-test:
    runs-on: ubuntu-latest
    needs: [startup_test, conditional_chart_check_files]
    if: |
      always() &&
      needs.conditional_chart_check_files.outputs.chart_files_changed == 'True'
      !contains(needs.*.result, 'failure') &&
      !cancelled()
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.6.3
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.3.1

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          ## If executed with debug this won't work anymore.
          changed=$(ct --config .github/config/ct.yaml list-changed)
          charts=$(echo "$changed" | tr '\n' ' ' | xargs)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
            echo "::set-output name=changed_charts::$charts"
          fi

      - name: Run Artifact Hub lint
        run: |
          curl -s https://api.github.com/repos/artifacthub/hub/releases/latest | grep -E 'browser_download_url' | grep linux_amd64.tar.gz\" | grep -Eo 'https://[^\"]*' | xargs wget -O - | tar -xz
          ./ah lint -p charts/ciroh || exit 1
          rm -f ./ah

      - name: Run chart-testing (lint)
        run: ct lint --debug --config .github/config/ct.yaml

      ## Might need to be uncommented when the testing gets resolved:
      ## the testing fails for two reasons the TDS services does never gets scheduled
      ## the automatization of the geoserver does not work and the salt job is failling
      # - name: Create kind cluster
      #   uses: helm/kind-action@v1.5.0
      #   if: steps.list-changed.outputs.changed == 'true'

      # - name: Run chart-testing (install)
      #   run: ct install --debug --config .github/config/ct.yaml
      #   if: steps.list-changed.outputs.changed == 'true'
