name: push_commits_no_tag

# Push to docker hub if no tag has been created.
on:
  push:
    branches:
      # - 'aws-portal'
      - 'main'

env:
  TEST_IMAGE: gioelkin/tethys_portal:dev_${GITHUB_SHA}
  IMAGE_TAG: dev_${GITHUB_SHA}
  DOCKER_HUB_ORG: gioelkin
  DOCKER_REPO: tethys_portal
  MAX_NUMBER_IMAGE: 5
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Set Env
        run: |
          echo "KANIKO_CACHE_REGISTRY=${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}-cache" >> $GITHUB_ENV
          echo "KANIKO_IMAGE=${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}" >> $GITHUB_ENV
      - name: Set Tag
        run: |
          echo "TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
        # If the branch is stable, we'll overwrite the TAG to include stable.
      - name: Set Stable Tag
        if: endsWith(github.ref, '/stable')
        run: |
          echo "TAG=stable" >> $GITHUB_ENV
      - name: Test Tag
        run: |
          echo $TAG
      - name: build and push tag
        uses: aevea/action-kaniko@master
        with:
          # Docker registry where the image will be pushed
          registry: docker.io
          # Username used for authentication to the Docker registry
          username: ${{ secrets.DOCKER_BUILDER_USERNAME }}
          # Password used for authentication to the Docker registry
          password: ${{ secrets.DOCKER_BUILDER_TOKEN }}
          # Image name
          image: ${{ env.KANIKO_IMAGE }}
          # Image tag
          tag: ${{ env.TAG }}
          # Enables build cache
          cache: true
          # Docker registry meant to be used as cache
          cache_registry: ${{ env.KANIKO_CACHE_REGISTRY }}
          # Dockerfile filename
          build_file: prod.Dockerfile
          extra_args: --use-new-run --compressed-caching=false --snapshotMode=redo --cleanup
  startup_test:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_BUILDER_USERNAME }} -p ${{ secrets.DOCKER_BUILDER_TOKEN }}

      - name: Pull Docker Image
        run: |
          docker pull ${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
      - name: Run Salt Test
        run: |
          export "TEST_IMAGE=${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
          export "TEST_COMMAND=run.sh --test" >> $GITHUB_ENV
          docker compose up -f docker-compose-ci.yml
          export "TEST_COMMAND=run.sh" >> $GITHUB_ENV
          docker compose up -f docker-compose-ci.yml
      - name: List container
        run: |
          docker ps -a
      - name: Test
        run: |
          sleep 120
          docker run --network container:web appropriate/curl -s --retry 10 --retry-connrefused http://localhost:80
  cleanup:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: only keeps the first 5 image
        run: |
          echo "TAG=dev_${GITHUB_SHA}" >> $GITHUB_ENV
          echo $TAG
          . .github/scripts/clean_up_docker_hub.sh '${{ secrets.DOCKER_BUILDER_USERNAME }}' '${{ secrets.DOCKER_BUILDER_TOKEN }}' '${{ env.DOCKER_HUB_ORG }}' '${{ env.DOCKER_REPO }}' '${{ env.MAX_NUMBER_IMAGE }}'
