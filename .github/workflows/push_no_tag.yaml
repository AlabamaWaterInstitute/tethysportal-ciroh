name: push_commits_no_tag

# Push to docker hub if no tag has been created.
on:
  push:
    branches:
      - 'aws-portal'

env:
  TEST_IMAGE: awiciroh/tethys_portal:dev_${GITHUB_SHA}
  IMAGE_TAG: dev_${GITHUB_SHA}
  DOCKER_HUB_ORG: awiciroh
  DOCKER_REPO: tethys_portal
  MAX_NUMBER_IMAGE: 5
  # POSTGRES_DB: tethys_postgis
  # POSTGRES_PASSWORD: please_dont_use_default_passwords
  # POSTGRES_PORT: 5432
  # TETHYS_PUBLIC_HOST: postgis
  # TETHYS_DB_HOST: postgis
  # TETHYS_DB_PORT: 5432
  # TETHYS_DB_USERNAME: tethys_super
  # TETHYS_DB_PASSWORD: please_dont_use_default_passwords
  # TETHYS_DB_SUPERUSER: tethys_super
  # TETHYS_DB_SUPERUSER_PASS: please_dont_use_default_passwords
  # APP_DB_HOST: postgis
  # APP_DB_PORT: 5432
  # APP_DB_USERNAME: tethys_super
  # APP_DB_PASSWORD: please_dont_use_default_passwords
  # PORTAL_TEST_DATABASE: postgresql://postgres:please_dont_use_default_passwords@postgis:5432/tethys_postgis

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set Env
        run: |
          echo "KANIKO_CACHE_REGISTRY=${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}-cache" >> $GITHUB_ENV
          echo "KANIKO_IMAGE=${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}" >> $GITHUB_ENV
      - name: Set Tag
        run: |
          echo "TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
        # If the branch is stable, we'll overwrite the TAG to include stable.
      - name: Set Stable Tag
        if: endsWith(github.ref, '/stable')
        run: |
          echo "TAG=stable" >> $GITHUB_ENV
      - name: Test Tag
        run: |
          echo $TAG
      - name: build and push tag
        uses: aevea/action-kaniko@v0.6.1
        with:
          # Docker registry where the image will be pushed
          registry: docker.io
          # Username used for authentication to the Docker registry
          username: ${{ secrets.DOCKER_BUILDER_USERNAME }}
          # Password used for authentication to the Docker registry
          password: ${{ secrets.DOCKER_BUILDER_TOKEN }}
          # Image name
          image: ${{ env.KANIKO_IMAGE }}
          # Image tag
          tag: ${{ env.TAG }}
          # Enables build cache
          cache: true
          # Docker registry meant to be used as cache
          cache_registry: ${{ env.KANIKO_CACHE_REGISTRY }}
          # Dockerfile filename
          build_file: Dockerfile

  startup_test:
    needs: [build]
    runs-on: ubuntu-latest
    # services:
    #   postgis:
    #     image: postgis/postgis:12-2.5
    #     env:
    #       POSTGRES_HOST: postgis
    #       POSTGRES_PASSWORD: please_dont_use_default_passwords
    #       POSTGRES_DB: tethys_postgis
    #       POSTGRES_PORT: 5432
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 10
    #     ports:
    #       - 5432:5432

    #   geoserver:
    #     image: tethysplatform/geoserver:latest
    #     env:
    #       ENABLED_NODES: 4
    #       REST_NODES: 1
    #       MAX_MEMORY: 1024
    #       MIN_MEMORY: 512
    #       NUM_CORES: 4
    #       MAX_TIMEOUT: 60
    #     options: >-
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 10
    #     ports:
    #       - 8181:8181
    #       - 8081:8081
    #       - 8082:8082
    #       - 8083:8083
    #       - 8084:8084

    #   thredds:
    #     image: unidata/thredds-docker:4.6.20-SNAPSHOT
    #     env:
    #       # Password of the TDM admin user
    #       TDM_PW: tdm_pass
    #       # FQDN of the server THREDDS is running on
    #       TDS_HOST: thredds
    #       # Maximum Memory for THREDDS
    #       THREDDS_XMX_SIZE: 4G
    #       # Minimum Memory for THREDDS
    #       THREDDS_XMS_SIZE: 4G
    #       # Maximum Memory for TDM
    #       TDM_XMX_SIZE: 6G
    #       # Minimum Memory for TDM
    #       TDM_XMS_SIZE: 1G
    #     options: >-
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 10
    #     ports:
    #       - 8080:8080

    #   redis:
    #     image: redis:latest
    #     ports:
    #       - 6379:6379
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_BUILDER_USERNAME }} -p ${{ secrets.DOCKER_BUILDER_TOKEN }}

      - name: Pull Docker Image
        run: |
          docker pull ${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
      - name: Run Salt Test
        run: |
          TEST_IMAGE=${{ env.DOCKER_HUB_ORG }}/${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }} docker-compose up --build -d -f .github/scripts/docker-compose.yml
  cleanup:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: only keeps the first 5 image
        run: |
          echo "TAG=dev_${GITHUB_SHA}" >> $GITHUB_ENV
          echo $TAG
          . .github/scripts/clean_up_docker_hub.sh '${{ secrets.DOCKER_BUILDER_USERNAME }}' '${{ secrets.DOCKER_BUILDER_TOKEN }}' '${{ env.DOCKER_HUB_ORG }}' '${{ env.DOCKER_REPO }}' '${{ env.MAX_NUMBER_IMAGE }}'
